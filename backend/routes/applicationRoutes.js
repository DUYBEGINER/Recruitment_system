import express from 'express';
import {
  getApplications,
  getApplicationsByJob,
  getMyCandidateApplications,
  getApplicationDetail,
  updateApplicationStatus,
  countApplications,
  submitApplication,
} from '../controller/applicationController.js';
import { verifyToken } from "../middleware/verifyToken.js";
import { requireEmployer } from '../middleware/roleCheck.js';
import { uploadCV } from '../middleware/uploadcv.js';

const router = express.Router();

/**
 * Routes cho Application (h·ªì s∆° ·ª©ng tuy·ªÉn)
 * Base path: /applications
 */

// N·ªôp h·ªì s∆° ·ª©ng tuy·ªÉn (Public - y√™u c·∫ßu ƒëƒÉng nh·∫≠p)
// POST /applications/apply
// ‚ö†Ô∏è V·ªõi FormData, ph·∫£i upload tr∆∞·ªõc ƒë·ªÉ c√≥ req.body, sau ƒë√≥ check duplicate
router.post('/apply', verifyToken, (req, res, next) => {
  uploadCV.single('file')(req, res, async (err) => {
    if (err) {
      console.error('‚ùå Multer upload error:', err);
      return res.status(400).json({
        success: false,
        message: err.message || 'L·ªói khi upload file!',
      });
    }
    
    // Sau khi Multer parse, req.body ƒë√£ c√≥ s·∫µn ‚Üí check duplicate
    try {
      const { jobId, candidateId } = req.body;
      
      if (!jobId || !candidateId) {
        return res.status(400).json({
          success: false,
          message: 'Thi·∫øu th√¥ng tin jobId ho·∫∑c candidateId!',
        });
      }

      // Import v√† check duplicate
      const { checkDuplicateApplication } = await import('../repositories/applicationRepository.js');
      const isDuplicate = await checkDuplicateApplication(
        parseInt(jobId),
        parseInt(candidateId)
      );

      if (isDuplicate) {
        // ‚ö†Ô∏è N·∫øu duplicate, X√ìA file ƒë√£ upload
        if (req.file) {
          const fs = await import('fs');
          const filePath = req.file.path;
          fs.unlinkSync(filePath);
          console.log('üóëÔ∏è Deleted uploaded file due to duplicate:', filePath);
        }
        
        return res.status(409).json({
          success: false,
          message: 'B·∫°n ƒë√£ ·ª©ng tuy·ªÉn v·ªã tr√≠ n√†y r·ªìi!',
        });
      }

      // Kh√¥ng duplicate ‚Üí ti·∫øp t·ª•c
      next();
    } catch (error) {
      console.error('Check duplicate error:', error);
      return res.status(500).json({
        success: false,
        message: 'L·ªói khi ki·ªÉm tra h·ªì s∆°!',
        error: error.message,
      });
    }
  });
}, submitApplication);

// L·∫•y danh s√°ch applications c·ªßa candidate ƒëang ƒëƒÉng nh·∫≠p
// GET /applications/my-applications
router.get('/my-applications', verifyToken, getMyCandidateApplications);

// L·∫•y danh s√°ch applications (c√≥ filter: job_id, status, employer_id)
// GET /applications?job_id=1&status=pending
router.get('/', verifyToken, requireEmployer, getApplications);

// L·∫•y danh s√°ch applications theo job_id
// GET /applications/job/:jobId
router.get('/job/:jobId', verifyToken, requireEmployer, getApplicationsByJob);

// ƒê·∫øm s·ªë l∆∞·ª£ng applications theo job
// GET /applications/job/:jobId/count?status=pending
router.get('/job/:jobId/count', verifyToken, requireEmployer, countApplications);

// L·∫•y chi ti·∫øt 1 application
// GET /applications/:id
router.get('/:id', verifyToken, requireEmployer, getApplicationDetail);

// C·∫≠p nh·∫≠t tr·∫°ng th√°i application
// PUT /applications/:id/status
router.put('/:id/status', verifyToken, requireEmployer, updateApplicationStatus);

export default router;
