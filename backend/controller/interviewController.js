import * as interviewRepo from '../repositories/interviewRepository.js';
import * as applicationRepo from '../repositories/applicationRepository.js';
import nodemailer from 'nodemailer';

/**
 * Controller ƒë·ªÉ qu·∫£n l√Ω InterviewSchedule
 */

// Helper function: T·∫°o email transporter
const createTransporter = () => {
  if (process.env.EMAIL_USER && process.env.EMAIL_PASSWORD) {
    return nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASSWORD,
      },
    });
  }
  return null;
};

// Helper function: G·ª≠i email m·ªùi ph·ªèng v·∫•n
const sendInterviewEmail = async (interviewData, application, senderName) => {
  try {
    let transporter = createTransporter();

    // N·∫øu ch∆∞a c·∫•u h√¨nh email, t·∫°o test account
    if (!transporter) {
      const testAccount = await nodemailer.createTestAccount();
      transporter = nodemailer.createTransporter({
        host: 'smtp.ethereal.email',
        port: 587,
        secure: false,
        auth: {
          user: testAccount.user,
          pass: testAccount.pass,
        },
      });
    }

    const methodText = {
      online: 'Tr·ª±c tuy·∫øn (Video call)',
      offline: 'T·∫°i vƒÉn ph√≤ng'
    };

    // HTML template cho email m·ªùi ph·ªèng v·∫•n
    const htmlContent = `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="UTF-8">
        <style>
          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
          .container { max-width: 600px; margin: 0 auto; padding: 20px; }
          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }
          .content { background: #f9fafb; padding: 30px; border-radius: 0 0 10px 10px; }
          .info-box { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }
          .info-row { display: flex; padding: 10px 0; border-bottom: 1px solid #e5e7eb; }
          .info-row:last-child { border-bottom: none; }
          .info-label { font-weight: bold; width: 150px; color: #667eea; }
          .info-value { flex: 1; }
          .footer { text-align: center; margin-top: 20px; color: #666; font-size: 12px; }
          .highlight { background: #fef3c7; padding: 15px; border-radius: 8px; margin: 15px 0; border-left: 4px solid #f59e0b; }
        </style>
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1 style="margin: 0;">üéâ Th∆∞ m·ªùi ph·ªèng v·∫•n</h1>
            <p style="margin: 10px 0 0 0;">PDD Tuy·ªÉn D·ª•ng</p>
          </div>
          <div class="content">
            <p>K√≠nh g·ª≠i <strong>${application.candidate_name}</strong>,</p>
            <p>Ch√∫ng t√¥i r·∫•t vui m·ª´ng th√¥ng b√°o r·∫±ng h·ªì s∆° c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ch·ªçn v√†o v√≤ng ph·ªèng v·∫•n cho v·ªã tr√≠:</p>
            <div class="highlight">
              <h3 style="margin: 0; color: #f59e0b;">üìã ${application.job_title}</h3>
            </div>
            
            <div class="info-box">
              <h3 style="margin-top: 0; color: #667eea;">üìÖ Th√¥ng tin bu·ªïi ph·ªèng v·∫•n</h3>
              <div class="info-row">
                <div class="info-label">Th·ªùi gian:</div>
                <div class="info-value">${new Date(interviewData.schedule_time).toLocaleString('vi-VN', { 
                  dateStyle: 'full', 
                  timeStyle: 'short' 
                })}</div>
              </div>
              <div class="info-row">
                <div class="info-label">H√¨nh th·ª©c:</div>
                <div class="info-value">${methodText[interviewData.method] || interviewData.method}</div>
              </div>
              ${interviewData.location ? `
              <div class="info-row">
                <div class="info-label">${interviewData.method === 'online' ? 'Link meeting:' : 'ƒê·ªãa ƒëi·ªÉm:'}</div>
                <div class="info-value">${interviewData.location}</div>
              </div>
              ` : ''}
              ${interviewData.notes ? `
              <div class="info-row">
                <div class="info-label">Ghi ch√∫:</div>
                <div class="info-value">${interviewData.notes}</div>
              </div>
              ` : ''}
            </div>

            <p><strong>Vui l√≤ng x√°c nh·∫≠n tham d·ª± qua email ho·∫∑c ƒëi·ªán tho·∫°i trong v√≤ng 24 gi·ªù.</strong></p>
            <p>N·∫øu b·∫°n c√≥ b·∫•t k·ª≥ th·∫Øc m·∫Øc n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i.</p>
            
            <p>Ch√∫c b·∫°n may m·∫Øn!<br><strong>${senderName}</strong></p>
            
            <div class="footer">
              <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª´ h·ªá th·ªëng PDD Tuy·ªÉn D·ª•ng</p>
            </div>
          </div>
        </div>
      </body>
      </html>
    `;

    const info = await transporter.sendMail({
      from: `"${senderName}" <${process.env.EMAIL_USER || 'noreply@pdd-recruitment.com'}>`,
      to: application.candidate_email,
      subject: `[PDD Tuy·ªÉn D·ª•ng] Th∆∞ m·ªùi ph·ªèng v·∫•n - ${application.job_title}`,
      html: htmlContent,
    });

    console.log('Interview invitation sent:', info.messageId);
    
    // Tr·∫£ v·ªÅ preview URL n·∫øu d√πng test email
    const previewURL = nodemailer.getTestMessageUrl(info);
    return {
      success: true,
      messageId: info.messageId,
      previewURL: previewURL || null
    };
  } catch (error) {
    console.error('Error sending interview email:', error);
    return {
      success: false,
      error: error.message
    };
  }
};

// T·∫°o l·ªãch ph·ªèng v·∫•n m·ªõi
export const createInterview = async (req, res) => {
  try {
    const { application_id, schedule_time, method, location, notes } = req.body;
    
    // Validate required fields
    if (!application_id || !schedule_time || !method) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng cung c·∫•p ƒë·∫ßy ƒë·ªß th√¥ng tin: application_id, schedule_time, method'
      });
    }

    // Ki·ªÉm tra application c√≥ t·ªìn t·∫°i kh√¥ng
    const application = await applicationRepo.getApplicationById(application_id);
    if (!application) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y h·ªì s∆° ·ª©ng tuy·ªÉn'
      });
    }

    // N·∫øu l√† HR, ki·ªÉm tra quy·ªÅn (ch·ªâ l·∫≠p l·ªãch cho job do m√¨nh qu·∫£n l√Ω)
    if (req.user.role === 'HR' && application.employer_id !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o l·ªãch ph·ªèng v·∫•n cho h·ªì s∆° n√†y'
      });
    }

    // T·∫°o l·ªãch ph·ªèng v·∫•n
    const interviewData = {
      application_id,
      interviewer_id: req.user.id, // Ng∆∞·ªùi t·∫°o l·ªãch
      schedule_time,
      method,
      location,
      notes,
      status: 'pending' // Tr·∫°ng th√°i m·∫∑c ƒë·ªãnh
    };

    const interview = await interviewRepo.createInterview(interviewData);

    // G·ª≠i email th√¥ng b√°o cho ·ª©ng vi√™n
    const senderName = req.user.full_name || 'PDD Tuy·ªÉn D·ª•ng';
    const emailResult = await sendInterviewEmail(interviewData, application, senderName);

    res.status(201).json({
      success: true,
      message: emailResult.success 
        ? 'T·∫°o l·ªãch ph·ªèng v·∫•n v√† g·ª≠i email th√†nh c√¥ng' 
        : 'T·∫°o l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng nh∆∞ng g·ª≠i email th·∫•t b·∫°i',
      data: interview,
      emailSent: emailResult.success,
      emailPreview: emailResult.previewURL || null
    });
  } catch (error) {
    console.error('Error in createInterview:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi t·∫°o l·ªãch ph·ªèng v·∫•n',
      error: error.message
    });
  }
};

// L·∫•y danh s√°ch l·ªãch ph·ªèng v·∫•n
export const getInterviews = async (req, res) => {
  try {
    const { status, method, from_date, to_date, application_id } = req.query;
    
    const filters = {
      status,
      method,
      from_date,
      to_date,
      application_id: application_id ? parseInt(application_id) : undefined
    };

    // N·∫øu l√† HR, ch·ªâ xem l·ªãch do m√¨nh t·∫°o
    if (req.user.role === 'HR') {
      filters.interviewer_id = req.user.id;
    }

    const interviews = await interviewRepo.getAllInterviews(filters);

    res.json({
      success: true,
      message: 'L·∫•y danh s√°ch l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng',
      data: interviews
    });
  } catch (error) {
    console.error('Error in getInterviews:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch l·ªãch ph·ªèng v·∫•n',
      error: error.message
    });
  }
};

// L·∫•y chi ti·∫øt l·ªãch ph·ªèng v·∫•n
export const getInterviewDetail = async (req, res) => {
  try {
    const { id } = req.params;
    
    const interview = await interviewRepo.getInterviewById(parseInt(id));
    
    if (!interview) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch ph·ªèng v·∫•n'
      });
    }

    // Ki·ªÉm tra quy·ªÅn (HR ch·ªâ xem l·ªãch do m√¨nh t·∫°o ho·∫∑c c·ªßa job m√¨nh qu·∫£n l√Ω)
    if (req.user.role === 'HR' && 
        interview.interviewer_id !== req.user.id && 
        interview.employer_id !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn xem l·ªãch ph·ªèng v·∫•n n√†y'
      });
    }

    res.json({
      success: true,
      message: 'L·∫•y chi ti·∫øt l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng',
      data: interview
    });
  } catch (error) {
    console.error('Error in getInterviewDetail:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y chi ti·∫øt l·ªãch ph·ªèng v·∫•n',
      error: error.message
    });
  }
};

// C·∫≠p nh·∫≠t l·ªãch ph·ªèng v·∫•n
export const updateInterview = async (req, res) => {
  try {
    const { id } = req.params;
    const { schedule_time, method, location, notes, status } = req.body;
    
    const existingInterview = await interviewRepo.getInterviewById(parseInt(id));
    
    if (!existingInterview) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch ph·ªèng v·∫•n'
      });
    }

    // Ki·ªÉm tra quy·ªÅn (HR ch·ªâ s·ª≠a l·ªãch do m√¨nh t·∫°o)
    if (req.user.role === 'HR' && existingInterview.interviewer_id !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t l·ªãch ph·ªèng v·∫•n n√†y'
      });
    }

    const updateData = {
      schedule_time,
      method,
      location,
      notes,
      status
    };

    const updatedInterview = await interviewRepo.updateInterview(parseInt(id), updateData);

    res.json({
      success: true,
      message: 'C·∫≠p nh·∫≠t l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng',
      data: updatedInterview
    });
  } catch (error) {
    console.error('Error in updateInterview:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t l·ªãch ph·ªèng v·∫•n',
      error: error.message
    });
  }
};

// X√≥a l·ªãch ph·ªèng v·∫•n
export const deleteInterview = async (req, res) => {
  try {
    const { id } = req.params;
    
    const existingInterview = await interviewRepo.getInterviewById(parseInt(id));
    
    if (!existingInterview) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y l·ªãch ph·ªèng v·∫•n'
      });
    }

    // Ki·ªÉm tra quy·ªÅn (HR ch·ªâ x√≥a l·ªãch do m√¨nh t·∫°o)
    if (req.user.role === 'HR' && existingInterview.interviewer_id !== req.user.id) {
      return res.status(403).json({
        success: false,
        message: 'B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a l·ªãch ph·ªèng v·∫•n n√†y'
      });
    }

    await interviewRepo.deleteInterview(parseInt(id));

    res.json({
      success: true,
      message: 'X√≥a l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng'
    });
  } catch (error) {
    console.error('Error in deleteInterview:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi x√≥a l·ªãch ph·ªèng v·∫•n',
      error: error.message
    });
  }
};

// L·∫•y th·ªëng k√™ l·ªãch ph·ªèng v·∫•n
export const getInterviewStats = async (req, res) => {
  try {
    const filters = {};

    // N·∫øu l√† HR, ch·ªâ xem stats c·ªßa m√¨nh
    if (req.user.role === 'HR') {
      filters.interviewer_id = req.user.id;
    }

    const stats = await interviewRepo.getInterviewStats(filters);

    res.json({
      success: true,
      message: 'L·∫•y th·ªëng k√™ th√†nh c√¥ng',
      data: stats
    });
  } catch (error) {
    console.error('Error in getInterviewStats:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y th·ªëng k√™',
      error: error.message
    });
  }
};

// L·∫•y l·ªãch ph·ªèng v·∫•n theo application_id
export const getInterviewsByApplication = async (req, res) => {
  try {
    const { application_id } = req.params;
    
    const interviews = await interviewRepo.getInterviewsByApplicationId(parseInt(application_id));

    res.json({
      success: true,
      message: 'L·∫•y l·ªãch ph·ªèng v·∫•n th√†nh c√¥ng',
      data: interviews
    });
  } catch (error) {
    console.error('Error in getInterviewsByApplication:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y l·ªãch ph·ªèng v·∫•n',
      error: error.message
    });
  }
};
