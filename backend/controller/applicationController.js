import {
  getAllApplications,
  getApplicationsByJobId,
  getApplicationsByCandidateId,
  getApplicationById,
  updateApplicationStatus as updateStatus,
  countApplicationsByJobId,
  countApplicationsByStatus as countByStatus,
  getCandidateById,
  createApplication,
} from '../repositories/applicationRepository.js';
import { getCandidateByEmail, createCandidate } from '../repositories/candidateRepository.js';

/**
 * Controller ƒë·ªÉ qu·∫£n l√Ω Applications (h·ªì s∆° ·ª©ng tuy·ªÉn)
 */

// L·∫•y danh s√°ch applications
export async function getApplications(req, res) {
  try {
    const { job_id, status, employer_id } = req.query;
    const userRole = req.user?.role;
    const userId = req.user?.id;

    const filters = {};

    // N·∫øu c√≥ job_id th√¨ filter theo job_id
    if (job_id) {
      filters.job_id = parseInt(job_id);
    }

    // N·∫øu c√≥ status th√¨ filter theo status
    if (status) {
      filters.status = status;
    }

    // HR ch·ªâ xem applications c·ªßa jobs m√¨nh t·∫°o
    if (userRole === 'HR') {
      filters.employer_id = userId;
    } else if (employer_id) {
      // TPNS c√≥ th·ªÉ filter theo employer_id
      filters.employer_id = parseInt(employer_id);
    }

    const applications = await getAllApplications(filters);

    res.status(200).json({
      success: true,
      data: applications,
      message: 'L·∫•y danh s√°ch h·ªì s∆° th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Get applications error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch h·ªì s∆°!',
      error: error.message,
    });
  }
}

// L·∫•y danh s√°ch applications theo job_id
export async function getApplicationsByJob(req, res) {
  try {
    const { jobId } = req.params;
    const userRole = req.user?.role;

    // Ki·ªÉm tra quy·ªÅn: HR ch·ªâ xem applications c·ªßa job m√¨nh t·∫°o
    if (userRole === 'HR') {
      // TODO: Ki·ªÉm tra job c√≥ thu·ªôc v·ªÅ HR n√†y kh√¥ng
      // T·∫°m th·ªùi b·ªè qua, s·∫Ω check ·ªü frontend
    }

    const applications = await getApplicationsByJobId(parseInt(jobId));

    res.status(200).json({
      success: true,
      data: applications,
      message: 'L·∫•y danh s√°ch h·ªì s∆° th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Get applications by job error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch h·ªì s∆°!',
      error: error.message,
    });
  }
}

// L·∫•y danh s√°ch applications c·ªßa candidate ƒëang ƒëƒÉng nh·∫≠p
export async function getMyCandidateApplications(req, res) {
  try {
    const candidateId = req.user?.id;

    if (!candidateId) {
      return res.status(401).json({
        success: false,
        message: 'Vui l√≤ng ƒëƒÉng nh·∫≠p!',
      });
    }

    const applications = await getApplicationsByCandidateId(candidateId);

    res.status(200).json({
      success: true,
      data: applications,
      message: 'L·∫•y danh s√°ch h·ªì s∆° ƒë√£ ·ª©ng tuy·ªÉn th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Get my applications error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y danh s√°ch h·ªì s∆°!',
      error: error.message,
    });
  }
}

// L·∫•y chi ti·∫øt 1 application
export async function getApplicationDetail(req, res) {
  try {
    const { id } = req.params;
    const application = await getApplicationById(parseInt(id));

    if (!application) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y h·ªì s∆°!',
      });
    }

    res.status(200).json({
      success: true,
      data: application,
      message: 'L·∫•y chi ti·∫øt h·ªì s∆° th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Get application detail error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi l·∫•y chi ti·∫øt h·ªì s∆°!',
      error: error.message,
    });
  }
}

// C·∫≠p nh·∫≠t tr·∫°ng th√°i application
export async function updateApplicationStatus(req, res) {
  try {
    const { id } = req.params;
    const { status } = req.body;

    // Validate status - theo ERD: submitted, reviewing, accepted, rejected
    const validStatuses = ['submitted', 'reviewing', 'accepted', 'rejected'];
    if (!validStatuses.includes(status)) {
      return res.status(400).json({
        success: false,
        message: `Tr·∫°ng th√°i kh√¥ng h·ª£p l·ªá! Ch·ªâ ch·∫•p nh·∫≠n: ${validStatuses.join(', ')}`,
      });
    }

    const updated = await updateStatus(parseInt(id), status);

    if (!updated) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y h·ªì s∆°!',
      });
    }

    res.status(200).json({
      success: true,
      message: 'C·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªì s∆° th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Update application status error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i h·ªì s∆°!',
      error: error.message,
    });
  }
}

// ƒê·∫øm s·ªë l∆∞·ª£ng applications theo job
export async function countApplications(req, res) {
  try {
    const { jobId } = req.params;
    const { status } = req.query;

    let count;
    if (status) {
      count = await countByStatus(parseInt(jobId), status);
    } else {
      count = await countApplicationsByJobId(parseInt(jobId));
    }

    res.status(200).json({
      success: true,
      data: { count },
      message: 'ƒê·∫øm s·ªë l∆∞·ª£ng h·ªì s∆° th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Count applications error:', error);
    res.status(500).json({
      success: false,
      message: 'L·ªói khi ƒë·∫øm s·ªë l∆∞·ª£ng h·ªì s∆°!',
      error: error.message,
    });
  }
}

// N·ªôp h·ªì s∆° ·ª©ng tuy·ªÉn
export async function submitApplication(req, res) {
  try {
    console.log('üìù Submit application request received');
    console.log('Body:', req.body);
    console.log('File:', req.file);
    
    const { jobId, candidateId, fullName, email, phone, coverLetter } = req.body;

    // Validate required fields
    if (!jobId || !candidateId) {
      return res.status(400).json({
        success: false,
        message: 'Thi·∫øu th√¥ng tin jobId ho·∫∑c candidateId!',
      });
    }

    // L·∫•y th√¥ng tin candidate t·ª´ database ƒë·ªÉ verify
    const candidate = await getCandidateById(parseInt(candidateId));
    
    if (!candidate) {
      return res.status(404).json({
        success: false,
        message: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ·ª©ng vi√™n!',
      });
    }

    // L·∫•y CV URL t·ª´ file upload ho·∫∑c CV c√≥ s·∫µn c·ªßa candidate
    let cvUrl = candidate.cv_url; // CV m·∫∑c ƒë·ªãnh t·ª´ profile
    
    // N·∫øu c√≥ upload file m·ªõi
    if (req.file) {
      cvUrl = `/uploads/${req.file.filename}`;
      console.log('‚úÖ File uploaded:', cvUrl);
    }

    if (!cvUrl) {
      return res.status(400).json({
        success: false,
        message: 'Vui l√≤ng upload CV!',
      });
    }

    // T·∫°o application v·ªõi ch·ªâ c√°c field c√≥ trong DB
    const applicationData = {
      job_id: parseInt(jobId),
      candidate_id: parseInt(candidateId),
      cv_url: cvUrl,
      status: 'submitted',
    };

    const application = await createApplication(applicationData);

    // Tr·∫£ v·ªÅ response v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin (bao g·ªìm c·∫£ info t·ª´ form)
    res.status(201).json({
      success: true,
      data: {
        applicationId: application.id,
        jobId: application.job_id,
        candidateId: application.candidate_id,
        candidateName: fullName || candidate.full_name,
        candidateEmail: email || candidate.email,
        candidatePhone: phone || candidate.phone,
        cvUrl: application.cv_url,
        status: application.status,
        submittedAt: application.submitted_at,
        coverLetter: coverLetter || null,
      },
      message: 'N·ªôp h·ªì s∆° th√†nh c√¥ng!',
    });
  } catch (error) {
    console.error('Submit application error:', error);
    
    // X·ª≠ l√Ω l·ªói duplicate
    if (error.message.includes('ƒë√£ ·ª©ng tuy·ªÉn')) {
      return res.status(409).json({
        success: false,
        message: error.message,
      });
    }

    res.status(500).json({
      success: false,
      message: 'L·ªói khi n·ªôp h·ªì s∆°!',
      error: error.message,
    });
  }
}
